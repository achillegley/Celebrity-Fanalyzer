//Testing Frameworks
import { createPinia, setActivePinia } from 'pinia'
import { beforeEach, describe, expect, it, vi } from 'vitest'

// Necessary Components
import { useRequestStore, useUserStore } from 'src/stores'
import { waitUntil } from 'src/utils/waitUntil'

describe('Users Store', () => {
  beforeEach(async () => {
    setActivePinia(createPinia())

    global.fetch = vi.fn(async () => {
      return {
        text: () => '255.255.255.255'
      }
    })
  })

  const randomUser = {
    email: Math.random().toString(36).substring(5, 10) + '@vitest.com',
    name: 'Unit Tester',
    password: import.meta.env.VITE_TEST_PASSWORD
  }

  it('Should create a user and request to become a writer', async () => {
    const requestStore = useRequestStore()
    const userStore = useUserStore()

    await userStore.emailSignUp(randomUser)
    await waitUntil(() => userStore.getUser.uid)
    expect(userStore.getUser.uid).toBeTruthy()

    const message = "This is a message generated by 'requests.spec.js' requesting to become a writer."
    await requestStore.becomeWriter(message)
  })

  it('Should login as an Admin and deny the above request', async () => {
    const requestStore = useRequestStore()
    const userStore = useUserStore()

    let adminUser = {
      email: import.meta.env.VITE_TEST_USER,
      password: import.meta.env.VITE_TEST_PASSWORD
    }
    await userStore.emailSignIn(adminUser)
    await waitUntil(() => userStore.getUser.uid)
    expect(userStore.getUser.uid).toBeTruthy()

    await requestStore.readRequests()
    await waitUntil(() => requestStore.getRequests.length > 0)
    const requests = requestStore.getRequests
      .filter((request) => request.status === 'pending')
      .map((request) => ({ ...request, displayName: request.user?.displayName, email: request.user?.email, role: request.user?.role }))
    expect(requests.length).toBeGreaterThan(0)

    const request = requests.find((request) => request.user.email === randomUser.email)

    await requestStore.denyWriter(request.id)
    await waitUntil(() => requestStore.getRequests.length === requests.length - 1)
    expect(requestStore.getRequests.length).toBe(requests.length - 1)
  })
})
